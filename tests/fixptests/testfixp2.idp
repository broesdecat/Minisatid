Given:
	type int X = {1..2}
Find:
	Q(X)
Declare:
	T(X)
	Z(X)
	Start(X)
	P(X)
Satisfying:
	!x: Start(x) => Q(x).
	GFD[
		Q(x) <- T(x).
		LFD[			
			!x[X]: T(x) <- !y: (Z(y) | T(y)).
			Z(x) <- P(x).
		]
	]
	~P(1).
	Start(1).
Data:
