//Parity game:
Given:
	type Vertex
	type int Turn = {0;1}
	type int Priority
	Edge(Vertex, Vertex)
	Prior(Vertex, Priority)
	Start(Vertex, Turn)
Find:
	Strategy(Vertex, Vertex)	//Strategy(x, y) means that if at node x, the turn is to PO, y is chosen)
Declare:
	WinP0
	Least(Priority)
	Even(Priority)
	Odd(Priority)
	P(Turn, Vertex, Priority)
	Q(Turn, Vertex, Priority)

Satisfying:
WinP0.

GFD[
	P(t,x,y) <- Q(t,x,y).
	LFD[
		Q(0,x,y) <- Edge(x,z) & P(1,z,y) & Prior(z,y).
		Q(1,x,y) <- Strategy(x,z) & P(0,z,y) & Prior(z,y).
		
		Q(0,x,y) <- Edge(x,z) & Q(1,z,y).
		Q(1,x,y) <- Strategy(x,z) & Q(0,z,y).
	]
]

{
	!x[Priority]: Least(x) <- !y z: Start(y,t) & P(t,y,z) & x=<z.
	!x[Priority]: WinP0 	  <- Least(x) & Even(x).
}

{
	Even(0) <-.
	Odd(x+1) <- Even(x).
	Even(x+1) <- Odd(x).
}

Data:
	Vertex = {1;2;3;4;5}
	Priority = {1..3}
	Prior = {1,1;2,3;3,1;4,2;5,1}
	Edge = {1,2;2,3;3,4;4,5;3,1;}
	Start = {1,1}
