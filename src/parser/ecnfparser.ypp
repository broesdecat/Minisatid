/*
 * Copyright 2011 Katholieke Universiteit Leuven
 *
 * Use of this software is governed by the GNU LGPLv3.0 license
 *
 * Written by Broes De Cat, K.U.Leuven, Departement
 * Computerwetenschappen, Celestijnenlaan 200A, B-3001 Leuven, Belgium
 */
%require "2.4.1"
%skeleton "lalr1.cc"
%defines
//%debug
%error-verbose
%name-prefix="ecnf"
%define namespace "MinisatID"
%define parser_class_name "ECNFParser"
%parse-param { MinisatID::ECNFScanner &scanner }
%parse-param { MinisatID::ExternalConstraintVisitor* wrapper }
%parse-param { uint id }
%lex-param   { MinisatID::ECNFScanner &scanner }

%code requires{
	#include <iostream>
	#include <stdio.h>
	#include <cstring>
	#include <string>
	#include <vector>
	#include <list>
	#include <map>
	
	#include "external/ExternalUtils.hpp"
	#include "external/Translator.hpp"
	#include "utils/Print.hpp"
	#include "external/Constraints.hpp"
	#include "theorysolvers/PCSolver.hpp"
	
	#include <limits>
	
	using namespace MinisatID;
	using namespace std;
	
	typedef numeric_limits<int> intlim;
	
	typedef ExternalConstraintVisitor* pwls;
	
	// Forward-declare the Scanner class; the Parser needs to be assigned a 
	// Scanner, but the Scanner can't be declared without the Parser
	namespace MinisatID {
		class ECNFScanner;
	}
}

%code{
	// Prototype for the yylex function
	static int ecnflex(MinisatID::ECNFParser::semantic_type * yylval, MinisatID::ECNFScanner &scanner);
		
	// TODO External state (to be removed in future)
	FODOTTranslator*	fodottrans = NULL;
	LParseTranslator*	simpletrans = NULL;
	int atoms, clauses;
	
	/**
	 * CR-CheckResult: checks the result of passing some data to the solvers.
	 * The result is false if unsat was already detected.
	 */
	template<class Wrapper, class T>
	void CR(Wrapper* wrapper, const T& formula);
	
	MinisatID::Atom cAtom(string* c);
	MinisatID::Lit cLiteral(string* c);
	MinisatID::Weight cWeight(string* s);
	int cID(string* c);
	
	// Convert integer to string
	std::string itos(int n) {
	   if(n == 0) return "0";
	   std::string s;
		int a = abs(n);
	   while(a > 0) {
	      int temp = a % 10;
	      char c = '0' + temp;
	      s = c + s;
	      a = (a - temp) / 10;
	   }
		if(n < 0) return ('-' + s);
	   else return s;
	}
	
	// Parsing
	
	void addTuple(int literalnumber, const string& atom);
	void parsetruelist(std::vector<int>* vi);
	void parsearbitlist(std::vector<int>* vi);
	void parsetype(std::string* name, std::vector<std::string>* inter);
	void parsepred(std::string* name, int num, std::vector<std::string>* ptypes, bool f);
	
	int defaultdefID = 1;
	enum ECNF_VERSION {VERSION_NONE, VERSION_OLD, VERSION_NEW}; 
	ECNF_VERSION currentreadversion = VERSION_NONE;
	
	void checkVersion(ECNF_VERSION version);
}

%union {
	int integer;
	bool boolean;
	const char* cstr;
	std::string* str;
    std::vector<int>* vints;
    std::vector<MinisatID::Weight>* vweights;
    std::vector<uint>* vuints;
    std::vector<MinisatID::Lit>* vlits;
    std::vector<MinisatID::WLtuple>* vlws;
    std::vector<MinisatID::Atom>* vatoms;
    MinisatID::EqType rel;
    MinisatID::ImplicationType impl;
    MinisatID::AggType aggr;
    MinisatID::AggSign sign;
    MinisatID::AggSem sem;
    std::vector<std::vector<MinisatID::Lit> >* DCNSymmetry;
	std::vector<std::string>*	vstr;
}

%token DEFOP
%token SUBSETMINDEFN MNMZDEFN VARMINDEFN AGGMINDEFN
%token SETDEFN WSETDEFN  
%token <integer> ZERO
%token <str> NUMBER
%token <sem> SEMDEFN
%token <sign> SIGNDEFN 
%token <rel> REL
%token <impl> IMPL
%token <aggr> AGGDEFN
%token CNF ECNF DEFPRESENT AGGPRESENT MINIMPRESENT
%token ORSEM
%token INTVAR INTVARDOM CPSUM CPPROD ELEMENT COUNT DISTINCT DELIM BINTRI BINTRT IMPLICATION
%token SYMMSTART SYMMEND CYCLESTART CYCLEEND SYMMDELIM

%type <integer> number
%type <str> weight
%type <vweights> weightbody
%type <vuints> uibody
%type <vlits> body
%type <vlws> wbody
%type <vlits> cycle
%type <DCNSymmetry> symmetry


//Translation
%token TRANSHEADER TRANSHEADER2
%token TYPE
%token PRED
%token FUNC
%token SHOWPRED
%token SHOWFUNC
%token TRUE
%token ARBIT

/** Other Terminals **/
%token <str> T_ID
%token <integer> T_NUM

/** Non-terminals with semantic value **/
%type <str>	identifier
%type <vints>	numlist
%type <vstr>	uint
%type <vstr>	idnlist

//Blijkt nog niet te werken, zal ook wel in een nieuwere versie zijn
//%destructor { delete $$; report("DELETED.\n"); } wbody ibody body

%start init

%%

/*
 * Decides whether to use CNF or ECNF
 */
init	:	CNF	number number 
				{ atoms = $2; clauses = $3; } 
			cnftheory
		|	ECNF header ecnftheory translation
		;

header	: 	/*empty*/
		| 	header DEFPRESENT // Backwards compatibility
		| 	header AGGPRESENT // Backwards compatibility
		| 	header MINIMPRESENT // Backwards compatibility
		;
		
// CNF THEORY
		
cnftheory:	/*empty*/
		| 	cnftheory cnfclause
		|	cnftheory symmetryblock
		;
			
cnfclause: 	body ZERO	
				{	
					Disjunction clause(id++, *$1);
					CR(wrapper, clause);
					delete $1;
				}
		;
			
//---------------------------------------------		
// ECNF THEORY	
//---------------------------------------------

ecnftheory	:	/* empty */
			|	ecnftheory clause
			|	ecnftheory rule
			|	ecnftheory implication
			| 	ecnftheory agg
			|	ecnftheory set
			|	ecnftheory wset
			|	ecnftheory mnmz
			|	ecnftheory subsetmnmz
			|	ecnftheory varmnmz
			|	ecnftheory summnmz
			|	ecnftheory aggmnmz
			|	ecnftheory intvar
			|	ecnftheory cpconstraint
			| 	ecnftheory symmetryblock
			;
			
mnmz	:	MNMZDEFN body ZERO
			{
				CR(wrapper, MinimizeOrderedList(1, *$2));
				delete $2; 
			}
subsetmnmz: SUBSETMINDEFN body ZERO
			{
				CR(wrapper, MinimizeSubset(1, *$2));
				delete $2; 
			}
varmnmz :	VARMINDEFN NUMBER ZERO
			{ 
				CR(wrapper, MinimizeVar(1, cID($2)));
			}
			
aggmnmz :	AGGMINDEFN AGGDEFN NUMBER ZERO 	
			{
				CR(wrapper, MinimizeAgg(1, cID($3), $2));
				delete $3;
			}

// NOTE: only for compatibility (has redundant head atom)
summnmz :	AGGMINDEFN AGGDEFN NUMBER NUMBER ZERO 	
			{
				CR(wrapper, MinimizeAgg(1, cID($4), $2));
				delete $3; delete $4;
			}
		
clause	:	body ZERO	
			{
				Disjunction clause(id++, *$1);
				CR(wrapper, clause);
				delete $1;
			}
		;

rule	:	SEMDEFN NUMBER body ZERO
			{ 	
				checkVersion(VERSION_OLD);
				if($1==AggSem::OR){
					error(yyloc, "Incorrect rule type specification \"O\", should be either \"D\" or \"C\".");
				}
				Rule rule(id++, cAtom($2), *$3, $1==AggSem::COMP, defaultdefID); //AggSem is bit of a hack, to be fixed
				delete $2; delete $3;
				CR(wrapper, rule);
			}
		;

rule	:	SEMDEFN NUMBER DELIM NUMBER DEFOP body ZERO
			{ 	
				checkVersion(VERSION_NEW);
				if($1==AggSem::OR){
					error(yyloc, "Incorrect rule type specification \"O\", should be either \"D\" or \"C\".");
				}
				Rule rule(id++, cAtom($4), *$6, $1==AggSem::COMP, cID($2));//AggSem is bit of a hack, to be fixed
				delete $2; delete $4; delete $6;
				CR(wrapper, rule);
			}
		;
		
implication: IMPLICATION SEMDEFN NUMBER IMPL body ZERO
			{ 	
				Implication implic(id++, cLiteral($3), $4, *$5, $2==AggSem::COMP);
				delete $3; delete $5;
				CR(wrapper, implic);
			}
		;

agg		:	AGGDEFN SEMDEFN SIGNDEFN NUMBER NUMBER weight ZERO	
			{	
				if($2 == AggSem::DEF){
					checkVersion(VERSION_OLD);
				}
	
				CR(wrapper, Aggregate(id++, cLiteral($4), cID($5), cWeight($6), $1, $3, $2, defaultdefID));
				delete $4; delete $5; delete $6;
			}
		|	AGGDEFN ORSEM SIGNDEFN NUMBER NUMBER weight ZERO	
			{	
				CR(wrapper, Aggregate(id++, cLiteral($4), cID($5), cWeight($6), $1, $3, AggSem::OR, defaultdefID));
				delete $4; delete $5; delete $6;
			}
		|	AGGDEFN DEFOP NUMBER SIGNDEFN NUMBER NUMBER weight ZERO	
			{	
				checkVersion(VERSION_NEW);

				CR(wrapper, Aggregate(id++, mkPosLit(cAtom($5)), cID($6), cWeight($7), $1, $4, AggSem::DEF, cID($3)));
				delete $5; delete $6; delete $7;
			}
		;

set		:	SETDEFN NUMBER body ZERO	
			{ 	
				CR(wrapper, createSet(cID($2), *$3, 1));
				delete $2; delete $3;
			}
		;

wset	:	WSETDEFN NUMBER	wbody ZERO	
			{	
				WLSet set(cID($2), *$3);
				delete $2; delete $3;
				CR(wrapper, set);
			}
		;
		
// ECNF SYMMETRY SUPPORT
symmetryblock
		:	SYMMSTART symmetries SYMMEND
			{
				std::cerr << "block";
			}
		;
symmetries
		: symmetry
			{
				CR(wrapper, Symmetry(*$1));
				delete($1);
			
			}
		| symmetries SYMMDELIM symmetry
			{
				CR(wrapper, Symmetry(*$3));
				delete($3);
			}
		;
symmetry
		: symmetry CYCLESTART cycle CYCLEEND
			{
				$$ = $1;
				$$->push_back(*$3);
			}
		| CYCLESTART cycle CYCLEEND
			{
				$$ = new std::vector<std::vector<MinisatID::Lit> >(1,*$2);
			}
		;
			

cycle	:	cycle SYMMDELIM NUMBER  	{ $$ = $1; $$->push_back(cLiteral($3));	delete($3); }
		|	NUMBER				{ $$ = new std::vector<MinisatID::Lit>(1,cLiteral($1));	}
		;
		
		
// ECNF CONSTRAINT SUPPORT

intvar	:	INTVAR number weight weight ZERO 
			{
				IntVarRange var(id++, $2, cWeight($3), cWeight($4));
				CR(wrapper, var);
				delete $3; delete $4;
			}
		|	INTVARDOM number weightbody DELIM ZERO 
			{
				IntVarEnum var(id++, $2,*$3);
				CR(wrapper, var);
				delete $3;
			}
		;

//intvarset
//		:	INTVARSET number ibody ZERO 
//				{ 	CR(wrapper, wrapper->addIntVarSet($2, *$3)); delete $3; }
//		;

//abbreviations: T = intterm, I = intconst, R = relational operator, ST = set of T, SI = set of I

cpconstraint
		:	BINTRI NUMBER number REL weight ZERO 
			{ 	
				CPBinaryRel binrel(id++, cAtom($2), $3, $4, cWeight($5));
				CR(wrapper, binrel);
				delete $2; delete $5;
			}
		|	BINTRT NUMBER number REL number ZERO 
			{ 	
				CPBinaryRelVar binrel(id++, cAtom($2), $3, $4, $5);
				CR(wrapper, binrel);
				delete $2;
			}
		|	CPSUM NUMBER uibody DELIM weightbody REL weight ZERO   
			{ 	
				CPSumWeighted sum(id++, cAtom($2), *$3, *$5, $6, cWeight($7));
				CR(wrapper, sum);
				delete $2; delete $3; delete $5; delete $7;
			}
		|	CPPROD NUMBER uibody DELIM weight REL number ZERO   
			{ 	
				CPProdWeighted prod(id++, cAtom($2), *$3, cWeight($5), $6, $7);
				CR(wrapper, prod);
				delete $2; delete $3; delete $5; 
			}
		|	ELEMENT uibody DELIM number number ZERO 
			{ 	
				CR(wrapper, CPElement(id++, *$2, $4, $6));
				delete $2;
			}
			//only global card at the moment! 
		|	COUNT uibody DELIM weight REL number ZERO   
			{ 	
				CPCount count(id++, *$2, cWeight($4), $5, $6);
				CR(wrapper, count);
				delete $2; delete $4;
			}
			//only global alldiff at the moment!
		|	DISTINCT uibody DELIM ZERO //DELIM to remove shift-reduce conflict 
			{ 	
				CPAllDiff alldiff(id++, *$2);
				CR(wrapper, alldiff);
				delete $2;
			}
		;

// TRANSLATION

translation	: /* empty */
			|	TRANSHEADER 
				{
					fodottrans = new FODOTTranslator(wrapper->getOptions().transformat==OutputFormat::ASP);	
					wrapper->setTranslator(fodottrans);
				} 
				typelist predlist funclist truelist arbitlist
				
			| 	TRANSHEADER2 
				{	
					simpletrans = new LParseTranslator();				
					wrapper->setTranslator(simpletrans);
				}
				tuplelist
			;
			
typelist	: /* empty */
			| typelist type
			;
			
type		: TYPE identifier ':' idnlist	{ parsetype($2,$4); delete($2); delete($4);	}
			;

predlist	: /* empty */
			| predlist pred
			;

pred		: SHOWPRED T_NUM identifier ':' uint	{ parsepred($3,$2,$5,false); delete($3); delete($5);	}
			| PRED T_NUM identifier ':' uint		{ delete($3); delete($5);								}
			;

funclist	: /* empty */
			| funclist func
			;

func		: SHOWFUNC T_NUM identifier ':' uint	{ parsepred($3,$2,$5,true); delete($3); delete($5); 	}
			| FUNC T_NUM identifier ':' uint { delete($3); delete($5); }
			;

truelist	: TRUE ':' numlist	{ parsetruelist($3); delete($3); }
			;

arbitlist	: ARBIT ':' numlist	{ parsearbitlist($3); delete($3); }
			;

idnlist		: idnlist identifier	{ $1->push_back(*$2); $$ = $1; delete($2); }
			| idnlist T_NUM			{ $1->push_back(itos($2)); $$ = $1; }
			| identifier			{ $$ = new vector<string>(1,(*$1)); delete($1);	}
			| T_NUM					{ $$ = new vector<string>(1,itos($1)); }
			;

uint		: /* empty */		{ $$ = new vector<string>(0); }
			| uint identifier	{ $1->push_back(*$2); $$ = $1; delete($2); }
			;

numlist		: /* empty */		{ $$ = new vector<int>(0); }
			| numlist T_NUM		{ $1->push_back($2); $$ = $1; }
			| numlist identifier '/' T_NUM		{ $$ = $1; }
			| numlist identifier '/' T_NUM ':' { $$ = $1; }
			;
			
tuplelist	: /* empty */ 
			| tuplelist T_NUM identifier { addTuple($2, *$3); delete($3); }
			;

identifier	: T_ID	{ $$ = $1;	}
			;		

//---------------------------------------------		
// GENERAL RULES
//---------------------------------------------
			
//Clauses can be empty!
body	:	body NUMBER { $$ = $1; $$->push_back(cLiteral($2));	delete($2); }
		|				{ $$ = new std::vector<MinisatID::Lit>();	}
		;
		
wbody	:	wbody NUMBER REL 
			{ 
				if($3!=MinisatID::EqType::EQ) { 
					throw MinisatID::idpexception("Weighted sets can only contain tuples with equality.\n");
				} 
			} 
			weight	
			{ $$ = $1; $$->push_back(MinisatID::WLtuple(cLiteral($2), cWeight($5))); delete($2);  delete $5;}
			
		|	NUMBER REL 
			{ 
				if($2!=MinisatID::EqType::EQ) { 
					throw MinisatID::idpexception("Weighted sets can only contain tuples with equality.\n");
				} 
			} 
			weight	
			{ $$ = new std::vector<WLtuple>(1,MinisatID::WLtuple(cLiteral($1), cWeight($4))); delete($1); delete $4;}
		;
		
weightbody 	
		: 	weightbody weight	{ $$ = $1; $$->push_back(cWeight($2)); delete $2; }
		| 	weight			{ $$ = new vector<Weight>(1, cWeight($1)); delete $1;	}
		;
		
uibody 	: 	uibody number	{ $$ = $1; $$->push_back($2);	}
		| 	number  		{ $$ = new vector<uint>(1, $1);	}
		;
		
number	:	NUMBER	{ $$ = atoi((*$1).c_str()); delete($1); }
		|	ZERO	{ $$ = 0; }
		
weight	:	NUMBER	{ $$ = $1; }
		|	ZERO	{ $$ = new string("0"); }

%%

int ecnfwrap() {
	clog << "End of file reached before it was expected... bailing out.\n";
	return 1;
}

void checkVersion(ECNF_VERSION version){
	if(currentreadversion == VERSION_NONE){
		currentreadversion = version;
	}
	if(currentreadversion != version){
		throw idpexception("Cannot combine previous ecnf format with the new one "
				"(using rules/aggregates with and without definition id).\n");
	}
}

Atom cAtom(string* c){
	int i = atoi(c->c_str());
	if(i<0){
		throw idpexception("Negative number supplied where an atom was suspected.\n");
	}
	return Atom(i);
}

int cID(string* c){
	int i = atoi(c->c_str());
	if(i<1){
		throw idpexception("IDs have to be non-negative nonzero integers.\n");
	}
	return i;
}

Lit cLiteral(string* c){
	int i = atoi(c->c_str());
	return mkLit(abs(i), i<0);
}

Weight cWeight(string* s){
	const char* c = s->c_str();
	Weight w(0);
	bool begin = true, negate = false;
	for(int i = 0; c[i] != '\0'; ++i) {
	    if(begin && c[i]=='-'){
	    	negate = true;
	    	begin = false;
	    	continue;
	    }
#ifdef NOARBITPREC
		if(posInfinity()/10 < w){
			throw idpexception("Weight exceeds the maximum supported value. Consider using GMP.\n");
		}
#endif
	    w = w*10 + (c[i]-48);
	}
	if(negate){
		w *= -1;
	}
	return w;
}

/**
 * CR-CheckResult: checks the result of passing some data to the solvers.
 * The result is false if unsat was already detected.
 */
template<class Wrapper, class T>
void CR(Wrapper* wrapper, const T& formula){
	extAdd(*wrapper, formula);
	if(wrapper->isCertainlyUnsat()){
		throw idpexception("Unsat during parsing.\n");
	}		
}

void addTuple(int literalnumber, const string& atom) {
	if(simpletrans!=NULL){
		simpletrans->addTuple(Atom(literalnumber), atom);
	}
}

void parsetruelist(vector<int>* literalnumbers) {
	if(fodottrans!=NULL){
		fodottrans->setTruelist(*literalnumbers);
	}
}

void parsearbitlist(vector<int>* literalnumbers) {
	if(fodottrans!=NULL){
		fodottrans->setArbitlist(*literalnumbers);
	}
}

void parsetype(string* name, vector<string>* inter) {
	if(fodottrans!=NULL){
		fodottrans->addType(*name, *inter);
	}
}

void parsepred(string* name, int startingnumber, vector<string>* argtypes, bool isfunction) {
	if(fodottrans!=NULL){
		fodottrans->addPred(*name, startingnumber, *argtypes, isfunction);
	}
}

// We have to implement the error function
void MinisatID::ECNFParser::error(const MinisatID::ECNFParser::location_type&, const std::string &msg) {
	std::cerr << "Error: " << msg << std::endl;
}

// Now that we have the Parser declared, we can declare the Scanner and implement
// the yylex function
#include "parser/ECNFScanner.hpp"
static int ecnflex(MinisatID::ECNFParser::semantic_type * yylval, MinisatID::ECNFScanner &scanner) {
	return scanner.ecnflex(yylval);
}
