/*
 * SCC.h
 *
 *  Created on: Jan 19, 2010
 *      Author: broes
 */

#ifndef SCC_H_
#define SCC_H_

#include "Vec.h"
#include "SolverTypes.h"
#include "IDSolver.h"

class SCC {
private:
	vec<bool>	incomp;
	vec<Var>	stack;
	vec<Var>	visited; // =0 represents not visited; >0 corresponds to a unique value (the counter).
	int			counter;
	vec<Lit>& 	(IDSolver::*getChildren)();
	bool 		(IDSolver::*isValidChild)(Lit);
	int 		(IDSolver::*nNodes)();
	IDSolver&	idsolver;

	void visit(Var i, vec<Var> &root, vec<bool> &incomp, vec<Var> &stack, vec<Var> &visited, int& counter);

public:
	SCC(IDSolver& s, vec<Lit>& (IDSolver::*getChildren)(), bool (IDSolver::*isValidChild)(Lit), int (IDSolver::*nNodes)());
	virtual ~SCC();

	void calculateSCCs(vec<Var>& sccs);
};

#endif /* SCC_H_ */
